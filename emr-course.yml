Description: >-
  CloudFormation template to create Amazon EMR cluster for student and coursework. The script can deploy a reverse proxy 
  with basic authentication enabled on the master node to enforce authenticated access to Livy for remote spark sessions.
  An additional bootstrap script can also be executed. 
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Amazon EMR Cluster Configuration
        Parameters:
          - ReleaseLabel
          - InstanceType
          - VpcId
          - VPCPublicSubnet
          - EC2KeyPair
          - BootstrapProxyScript
          - BootstrapAdditionsScript

    ParameterLabels:
      ReleaseLabel:
        default: EMR Release Label
      VPCPublicSubnet:
        default: VPC Public Subnet
      EC2KeyPair:
        default: EC2 Key Pair
      BootstrapProxyScript:
        default: Proxy Bootstrap Script
      BootstrapAdditionsScript:
        default: Additional Bootstrap Script

Parameters:
  EC2KeyPair:
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName

  ReleaseLabel:
    Type: String
    Default: "emr-6.2.0"
    AllowedValues:
    - "emr-6.2.0"
    - "emr-5.32.0"
    Description: Amazon EMR Version
  VPCPublicSubnet:
    Type: 'AWS::EC2::Subnet::Id'
    Description: >-
      Public Subnet to be used for Amazon EMR cluster. 
    AllowedPattern: .+
  InstanceType:
    Type: String
    Default: m5.xlarge
    AllowedValues:
    - m5.xlarge
    - m6g.xlarge
    Description: Amazon EMR Cluster Instance Type
  
  BootstrapProxyScript:
    Type: String
    Description: URL to the bootstrap script that will be used to install a proxy on the master node.
    Default: https://raw.githubusercontent.com/senorkrabs/aws-emr-course-bootstrap/master/bootstrap-nginx.sh
  
  BootstrapAdditionsScript:
    Type: String
    Description: (Optional) URL to an additional bootstrap script that can be used for running commands on all nodes. 
    Default: ''

  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: Must be the VPC Id of an existing Virtual Private Cloud.

Rules:
  SubnetsInVPC:
    Assertions:
      - Assert:
          'Fn::Equals':
            - 'Fn::ValueOf':
                - 'VPCPublicSubnet'
                - 'VpcId'
            - !Ref VpcId
        AssertDescription: All subnets must in the VPC
Conditions:
  BootstrapAdditions: !Not [!Equals [!Ref BootstrapAdditionsScript, '']]
Resources:

  EMRCluster:
    Type: 'AWS::EMR::Cluster'
    Properties:
      Instances:
        MasterInstanceGroup:
          InstanceCount: 1
          InstanceType: !Ref InstanceType
          Market: ON_DEMAND
          Name: cfnMaster
        CoreInstanceGroup:
          InstanceCount: 1
          InstanceType: !Ref InstanceType
          Market: ON_DEMAND
          Name: cfnCore
        Ec2SubnetId: !Ref VPCPublicSubnet
        Ec2KeyName: !Ref EC2KeyPair
        AdditionalMasterSecurityGroups:
          - !Ref HTTPIngressSecurityGroup
      Name: course-emr-cluster
      BootstrapActions:
        # - Name: BootstrapNginx
        #   ScriptBootstrapAction:
        #     Path: s3://elasticmapreduce/bootstrap-actions/run-if
        #     Args: 
        #       - instance.isMaster=true
        #       - !Sub /bin/bash -c "$(curl -fsSL ${BootstrapProxyScript})"
        - !If 
            - BootstrapAdditions
            - Name: BootstrapAdditions
              ScriptBootstrapAction:
                Path: s3://elasticmapreduce/bootstrap-actions/run-if
                Args: 
                  - instance.isMaster=true
                  - !Sub /bin/bash -c "$(curl -fsSL ${BootstrapAdditionsScript})" 
            - !Ref AWS::NoValue           
        - !If 
            - BootstrapAdditions
            - Name: BootstrapAdditions
              ScriptBootstrapAction:
                Path: s3://elasticmapreduce/bootstrap-actions/run-if
                Args: 
                  - instance.isMaster=false
                  - !Sub /bin/bash -c "$(curl -fsSL ${BootstrapAdditionsScript})" 
            - !Ref AWS::NoValue
           
      Applications:
        - Name: Hadoop
        - Name: Spark
        - Name: Livy
        - Name: Zeppelin
        - Name: JupyterEnterpriseGateway
      JobFlowRole: EMR_EC2_DefaultRole
      ServiceRole: EMR_DefaultRole
      ReleaseLabel: !Ref ReleaseLabel
      VisibleToAllUsers: true
      LogUri: 
        Fn::Sub: 's3://${EMRLogsBucket}/elasticmapreduce/'
  EMRLogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  EMRCopyNotebooksStep:
    Type: 'AWS::EMR::Step'
    Properties:
      ActionOnFailure: CONTINUE
      HadoopJarStep:
        Args:
          - bash
          - -c
          - !Sub "$(curl -fsSL ${BootstrapProxyScript})"
        Jar: 'command-runner.jar'
        MainClass: ''
      Name: BootstrapLivyProxy
      JobFlowId: !Ref EMRCluster

  HTTPIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host
        VpcId: !Ref VpcId
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0          
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0          
Outputs:
  EMRMasterNodeDNS:
    Description: EMR Cluster Master Node DNS
    Value: !Sub http://${EMRCluster.MasterPublicDNS}

